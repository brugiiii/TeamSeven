{"mappings":"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","sources":["src/js/start.js","src/js/getMoviesGenres.js","src/js/onSearchByName.js"],"sourcesContent":["import { renderMoviesMarkup } from './renderFilms';\nimport { refs } from './refs';\nimport { fetchTrendingMovies } from './fetchTrendingMovies';\nimport { getMoviesGenres } from './getMoviesGenres';\nimport { onGalleryItemClick } from './onGalleryItemClick';\n\ngetMoviesGenres();\nfetchTrendingMovies().then(renderMoviesMarkup);\n\nrefs.galleryList.addEventListener('click', onGalleryItemClick);\n","import axios from 'axios';\nconst API_KEY = '90c7ff0c6a89140d8ec65b5296dfcca2';\n\nexport async function getMoviesGenres() {\n  const responce = await axios(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}`\n  );\n  const genres = responce.data.genres;\n\n  localStorage.setItem('genres', JSON.stringify(genres));\n}\n","import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport Pagination from 'tui-pagination';\nimport 'tui-pagination/dist/tui-pagination.css';\n// import { totalFilms } from './fetchTrendingMovies';\n// import { pageNumber } from './renderFilms';\n// import { renderMoviesMarkup } from './renderFilms';\nimport { startLoader, stopLoader } from './loader';\nimport { refs } from './refs';\nimport { MoviesServiceByName } from './apiServiceMovies';\n\nrefs.moviesSearchForm.addEventListener('submit', onFormSubmit);\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\nconst IMG_URL_RETINA = 'https://image.tmdb.org/t/p/w1280';\nconst DEFAULT_POSTER_URL =\n  'https://motivatevalmorgan.com/wp-content/uploads/2016/06/default-movie.jpg';\nfunction returnGenreName(genres, id) {\n  try {\n    const genreToFind = genres.find(genre => genre.id === id);\n    if (genreToFind) {\n      return genreToFind.name;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nconst moviesServiceByName = new MoviesServiceByName({\n  page: 1,\n  searchQuery: '',\n});\n// let pageNumber = 1;\nexport async function onFormSubmit(e) {\n  e.preventDefault();\n  startLoader();\n  moviesServiceByName.resetPage();\n\n  const { query } = e.target.elements;\n  const searchQuery = query.value.trim();\n\n  moviesServiceByName.query = searchQuery;\n\n  if (searchQuery === '') {\n    Notify.info('Enter something');\n    stopLoader();\n    return;\n  } else {\n    startLoader();\n    try {\n      moviesServiceByName.fetchMoviesByName().then(renderMoviesMarkup);\n\n      const pagination = new Pagination('pagination', {\n        totalItems: 500,\n        itemsPerPage: 10,\n        visiblePages: 5,\n        page: 1,\n      });\n      pagination.on('beforeMove', event => {\n        const currentPage = event.page;\n        moviesServiceByName.page = currentPage;\n        moviesServiceByName.fetchMoviesByName().then(renderMoviesMarkup);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n    function renderMoviesMarkup(response) {\n      try {\n        pageNumber = response.data.page;\n\n        const moviesArray = response.data.results;\n        const genres = JSON.parse(localStorage.getItem('genres'));\n        const markup = moviesArray\n          .map(({ poster_path, title, genre_ids, id, release_date }) => {\n            const genresCount = genre_ids.length;\n            const date = release_date.split('').splice(0, 4).join('');\n            let genresToShow = '';\n            const posterUrl = poster_path\n              ? `${IMG_URL}${poster_path}`\n              : DEFAULT_POSTER_URL;\n\n            const srcsetChecked = poster_path\n              ? `${IMG_URL}${poster_path} 1x, ${IMG_URL_RETINA}${poster_path} 2x`\n              : DEFAULT_POSTER_URL;\n\n            if (genresCount === 1) {\n              genresToShow = returnGenreName(genres, genre_ids[0]);\n            } else if (genresCount === 2) {\n              genresToShow = `${returnGenreName(\n                genres,\n                genre_ids[0]\n              )}, ${returnGenreName(genres, genre_ids[1])}`;\n            } else if (genresCount > 2) {\n              genresToShow = `${returnGenreName(\n                genres,\n                genre_ids[0]\n              )}, ${returnGenreName(genres, genre_ids[1])}, Other`;\n            }\n\n            return `<li class=\"film-card\" >\n      <a href=\"modal-film.html\" class=\"film-card__link\" >\n        <div class=\"film-card__img\">\n          <img src=\"${posterUrl}\" alt=\"${title}\" srcset=\"${srcsetChecked}\" loading=\"lazy\" data-id=\"${id}\"/>\n        </div>\n        <div class=\"film-card__info\">\n          <p class=\"film-card__title\">${title}</p>\n          <p class=\"film-card__description\">${genresToShow} | ${date}</p>\n        </div>\n      </a>\n    </li>`;\n          })\n          .join('');\n\n        refs.galleryList.innerHTML = markup;\n\n        stopLoader();\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n}\n"],"names":["$26XG5","parcelRequire","$bpxeT","$f84d4d22ea952dee$var$API_KEY","$f84d4d22ea952dee$var$_getMoviesGenres","$parcel$interopDefault","$2TvXO","mark","_callee","responce","genres","$dIxxU","default","concat","_ctx","sent","data","localStorage","setItem","JSON","stringify","apply","this","arguments","$yB0Cd","fetchTrendingMovies","then","renderMoviesMarkup","$4Nugj","refs","galleryList","addEventListener","$euASI","onGalleryItemClick","moviesSearchForm","e","$fa081402b79b674c$var$_onFormSubmit","$fa081402b79b674c$var$IMG_URL","$fa081402b79b674c$var$IMG_URL_RETINA","$fa081402b79b674c$var$DEFAULT_POSTER_URL","$fa081402b79b674c$var$returnGenreName","id","genreToFind","find","genre","name","error","console","log","$fa081402b79b674c$var$moviesServiceByName","$kzQwM","MoviesServiceByName","page","searchQuery","query","response","pageNumber","moviesArray","results","parse","getItem","markup","map","param","poster_path","title","genre_ids","release_date","genresCount","length","date","split","splice","join","genresToShow","posterUrl","srcsetChecked","innerHTML","$kvC6y","stopLoader","preventDefault","startLoader","resetPage","target","elements","value","trim","$h6c0i","Notify","info","fetchMoviesByName","$1VFfL","totalItems","itemsPerPage","visiblePages","on","event","currentPage"],"version":3,"file":"index.8a2814e9.js.map"}