{"mappings":"2iBAAA,IAAAA,EAAAC,EAAA,S,0BCAAC,EAAAD,EAAA,S,kBAGOE,iBACL,MAGMC,SAHiB,EAAAF,EAAAG,SACrB,2FAEsBC,KAAKF,OAE7BG,aAAaC,QAAQ,SAAUC,KAAKC,UAAUN,G,CDHhD,IACA,EAAAO,EAAAC,uBAAsBC,KAAKb,EAAAc,oBAE3BC,EAAAC,KAAKC,YAAYC,iBAAiB,QAASC,EAAAC,oB,WET3C,IAAAC,EAAApB,EAAA,S,sDAUAc,EAAAC,KAAKM,iBAAiBJ,iBAAiB,UAsBhCf,eAA4BoB,GACjCA,EAAEC,kBACF,EAAAC,EAAAC,eACAC,EAAoBC,YAEpB,MAAMC,MAAEA,GAAUN,EAAEO,OAAOC,SACrBC,EAAcH,EAAMI,MAAMC,OAIhC,GAFAP,EAAoBE,MAAQG,EAER,KAAhBA,EAGF,OAFAX,EAAAc,OAAOC,KAAK,wBACZ,EAAAX,EAAAY,cAEK,EACL,EAAAZ,EAAAC,eACA,IACEC,EAAoBW,oBAAoBzB,KAAKC,GAE1B,IAAIyB,EAAAC,GAAJ,CAAe,aAAc,CAC9CC,WAAY,IACZC,aAAc,GACdC,aAAc,EACdC,KAAM,IAEGC,GAAG,cAAcC,IAC1B,MAAMC,EAAcD,EAAMF,KAC1BjB,EAAoBiB,KAAOG,EAC3BpB,EAAoBW,oBAAoBzB,KAAKC,EAAmB,G,CAElE,MAAOkC,GACPC,QAAQC,IAAIF,E,CAEd,SAASlC,EAAmBqC,GAC1B,IACEC,WAAaD,EAAS7C,KAAKsC,KAE3B,MAAMS,EAAcF,EAAS7C,KAAKgD,QAC5BlD,EAASK,KAAK8C,MAAMhD,aAAaiD,QAAQ,WACzCC,EAASJ,EACZK,KAAI,EAACC,YAAEA,EAAWC,MAAEA,EAAKC,UAAEA,EAASC,GAAEA,EAAEC,aAAEA,MACzC,MAAMC,EAAcH,EAAUI,OACxBC,EAAOH,EAAaI,MAAM,IAAIC,OAAO,EAAG,GAAGC,KAAK,IACtD,IAAIC,EAAe,GACnB,MAAMC,EAAYZ,EACd,kCAAaA,IA9D3B,6EAiEgBa,EAAgBb,EAClB,kCAAaA,yCAAoCA,OAlE/D,6EAmFU,OAdoB,IAAhBK,EACFM,EAAeG,EAAgBrE,EAAQyD,EAAU,IACxB,IAAhBG,EACTM,EAAe,GAAGG,EAChBrE,EACAyD,EAAU,QACNY,EAAgBrE,EAAQyD,EAAU,MAC/BG,EAAc,IACvBM,EAAe,GAAGG,EAChBrE,EACAyD,EAAU,QACNY,EAAgBrE,EAAQyD,EAAU,cAGnC,iJAGGU,WAAmBX,cAAkBY,8BAA0CV,sGAG7DF,sDACMU,OAAkBJ,8CAGtD,IAECG,KAAK,IAERtD,EAAAC,KAAKC,YAAYyD,UAAYjB,GAE7B,EAAAhC,EAAAY,a,CACA,MAAOsC,GACP1B,QAAQC,IAAIyB,E,OApGpB,SAASF,EAAgBrE,EAAQ0D,GAC/B,IACE,MAAMc,EAAcxE,EAAOyE,MAAKC,GAASA,EAAMhB,KAAOA,IACtD,GAAIc,EACF,OAAOA,EAAYG,I,CAErB,MAAOJ,GACP1B,QAAQC,IAAIyB,E,EAIhB,MAAMhD,EAAsB,IAAI,EAAAqD,EAAAC,qBAAoB,CAClDrC,KAAM,EACNZ,YAAa,K","sources":["src/js/start.js","src/js/getMoviesGenres.js","src/js/onSearchByName.js"],"sourcesContent":["import { renderMoviesMarkup } from './renderFilms';\nimport { refs } from './refs';\nimport { fetchTrendingMovies } from './fetchTrendingMovies';\nimport { getMoviesGenres } from './getMoviesGenres';\nimport { onGalleryItemClick } from './onGalleryItemClick';\n\ngetMoviesGenres();\nfetchTrendingMovies().then(renderMoviesMarkup);\n\nrefs.galleryList.addEventListener('click', onGalleryItemClick);\n","import axios from 'axios';\nconst API_KEY = '90c7ff0c6a89140d8ec65b5296dfcca2';\n\nexport async function getMoviesGenres() {\n  const responce = await axios(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}`\n  );\n  const genres = responce.data.genres;\n\n  localStorage.setItem('genres', JSON.stringify(genres));\n}\n","import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport Pagination from 'tui-pagination';\nimport 'tui-pagination/dist/tui-pagination.css';\n// import { totalFilms } from './fetchTrendingMovies';\n// import { pageNumber } from './renderFilms';\n// import { renderMoviesMarkup } from './renderFilms';\nimport { startLoader, stopLoader } from './loader';\nimport { refs } from './refs';\nimport { MoviesServiceByName } from './apiServiceMovies';\n\nrefs.moviesSearchForm.addEventListener('submit', onFormSubmit);\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\nconst IMG_URL_RETINA = 'https://image.tmdb.org/t/p/w1280';\nconst DEFAULT_POSTER_URL =\n  'https://motivatevalmorgan.com/wp-content/uploads/2016/06/default-movie.jpg';\nfunction returnGenreName(genres, id) {\n  try {\n    const genreToFind = genres.find(genre => genre.id === id);\n    if (genreToFind) {\n      return genreToFind.name;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nconst moviesServiceByName = new MoviesServiceByName({\n  page: 1,\n  searchQuery: '',\n});\n// let pageNumber = 1;\nexport async function onFormSubmit(e) {\n  e.preventDefault();\n  startLoader();\n  moviesServiceByName.resetPage();\n\n  const { query } = e.target.elements;\n  const searchQuery = query.value.trim();\n\n  moviesServiceByName.query = searchQuery;\n\n  if (searchQuery === '') {\n    Notify.info('Enter something');\n    stopLoader();\n    return;\n  } else {\n    startLoader();\n    try {\n      moviesServiceByName.fetchMoviesByName().then(renderMoviesMarkup);\n\n      const pagination = new Pagination('pagination', {\n        totalItems: 500,\n        itemsPerPage: 10,\n        visiblePages: 5,\n        page: 1,\n      });\n      pagination.on('beforeMove', event => {\n        const currentPage = event.page;\n        moviesServiceByName.page = currentPage;\n        moviesServiceByName.fetchMoviesByName().then(renderMoviesMarkup);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n    function renderMoviesMarkup(response) {\n      try {\n        pageNumber = response.data.page;\n\n        const moviesArray = response.data.results;\n        const genres = JSON.parse(localStorage.getItem('genres'));\n        const markup = moviesArray\n          .map(({ poster_path, title, genre_ids, id, release_date }) => {\n            const genresCount = genre_ids.length;\n            const date = release_date.split('').splice(0, 4).join('');\n            let genresToShow = '';\n            const posterUrl = poster_path\n              ? `${IMG_URL}${poster_path}`\n              : DEFAULT_POSTER_URL;\n\n            const srcsetChecked = poster_path\n              ? `${IMG_URL}${poster_path} 1x, ${IMG_URL_RETINA}${poster_path} 2x`\n              : DEFAULT_POSTER_URL;\n\n            if (genresCount === 1) {\n              genresToShow = returnGenreName(genres, genre_ids[0]);\n            } else if (genresCount === 2) {\n              genresToShow = `${returnGenreName(\n                genres,\n                genre_ids[0]\n              )}, ${returnGenreName(genres, genre_ids[1])}`;\n            } else if (genresCount > 2) {\n              genresToShow = `${returnGenreName(\n                genres,\n                genre_ids[0]\n              )}, ${returnGenreName(genres, genre_ids[1])}, Other`;\n            }\n\n            return `<li class=\"film-card\" >\n      <a href=\"modal-film.html\" class=\"film-card__link\" >\n        <div class=\"film-card__img\">\n          <img src=\"${posterUrl}\" alt=\"${title}\" srcset=\"${srcsetChecked}\" loading=\"lazy\" data-id=\"${id}\"/>\n        </div>\n        <div class=\"film-card__info\">\n          <p class=\"film-card__title\">${title}</p>\n          <p class=\"film-card__description\">${genresToShow} | ${date}</p>\n        </div>\n      </a>\n    </li>`;\n          })\n          .join('');\n\n        refs.galleryList.innerHTML = markup;\n\n        stopLoader();\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n}\n"],"names":["$c9UGP","parcelRequire","$2shzp","async","genres","default","data","localStorage","setItem","JSON","stringify","$gkCWX","fetchTrendingMovies","then","renderMoviesMarkup","$krGWQ","refs","galleryList","addEventListener","$c72bu","onGalleryItemClick","$iQIUW","moviesSearchForm","e","preventDefault","$gjiCh","startLoader","$e06cf6d5b6d0a698$var$moviesServiceByName","resetPage","query","target","elements","searchQuery","value","trim","Notify","info","stopLoader","fetchMoviesByName","$parcel$interopDefault","$fb9GJ","totalItems","itemsPerPage","visiblePages","page","on","event","currentPage","error1","console","log","response","pageNumber","moviesArray","results","parse","getItem","markup","map","poster_path","title","genre_ids","id","release_date","genresCount","length","date","split","splice","join","genresToShow","posterUrl","srcsetChecked","$e06cf6d5b6d0a698$var$returnGenreName","innerHTML","error","genreToFind","find","genre","name","$8emQL","MoviesServiceByName"],"version":3,"file":"index.d24a76df.js.map"}